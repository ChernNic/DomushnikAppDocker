version: '3.9'  # Версия Docker Compose файла

services:  # Описание всех сервисов, которые будут работать в рамках одного приложения

  # Сервис базы данных (PostgreSQL)
  db:
    image: postgres:15  # Используется официальный образ PostgreSQL версии 15
    container_name: postgres  # Имя контейнера в рамках приложения
    environment:  # Переменные окружения для настройки базы данных
      POSTGRES_USER: postgres  # Имя пользователя базы данных
      POSTGRES_PASSWORD: postgres  # Пароль для доступа к базе данных
      POSTGRES_DB: DomushnikDb  # Имя базы данных, которая создается при старте контейнера
    volumes:  # Монтирование volume для сохранения данных PostgreSQL
      - postgres_data:/var/lib/postgresql/data  # Данные будут сохраняться в volume, чтобы не теряться при перезапуске контейнера
    ports:  # Проброс порта для доступа к базе данных
      - "5432:5432"  # Локальный порт 5432 пробрасывается на порт 5432 контейнера

  # Сервис веб-приложения (Django)
  web:
    build:  # Инструкция для сборки Docker-образа из текущего проекта
      context: .  # Указывает текущую директорию как контекст для сборки
    container_name: django  # Имя контейнера для веб-приложения
    volumes:  # Монтирование локального проекта в контейнер
      - .:/app  # Текущая директория монтируется в контейнер по пути /app
    ports:  # Проброс порта для доступа к веб-приложению
      - "8000:8000"  # Локальный порт 8000 пробрасывается на порт 8000 контейнера
    depends_on:  # Зависимости: Django запустится только после запуска указанных сервисов
      - db  # Зависит от базы данных
      - redis  # Зависит от Redis
    environment:  # Переменные окружения для настройки Django
      - DB_HOST=db  # Хост базы данных (имя сервиса из docker-compose)
      - DB_PORT=5432  # Порт базы данных
      - DB_NAME=DomushnikDb  # Имя базы данных
      - DB_USER=postgres  # Пользователь базы данных
      - DB_PASSWORD=postgres  # Пароль базы данных
      - CELERY_BROKER_URL=redis://redis:6379/0  # URL брокера сообщений (Redis) для Celery

  # Сервис Redis (брокер сообщений и кэширование)
  redis:
    image: redis:6.2  # Используется официальный образ Redis версии 6.2
    container_name: redis  # Имя контейнера Redis
    ports:  # Проброс порта для доступа к Redis
      - "6379:6379"  # Локальный порт 6379 пробрасывается на порт 6379 контейнера

  # Сервис Celery (обработка фоновых задач)
  celery:
    build:  # Инструкция для сборки Docker-образа из текущего проекта
      context: .  # Указывает текущую директорию как контекст для сборки
    container_name: celery  # Имя контейнера для Celery
    command: celery -A DomushnikProject worker --loglevel=info  # Команда для запуска Celery в режиме worker
    depends_on:  # Зависимости: Celery запустится только после запуска указанных сервисов
      - redis  # Зависит от Redis
      - web  # Зависит от Django (веб-приложения)
    volumes:  # Монтирование локального проекта в контейнер
      - .:/app  # Текущая директория монтируется в контейнер по пути /app
    environment:  # Переменные окружения для настройки Celery
      - DB_HOST=db  # Хост базы данных (имя сервиса из docker-compose)
      - DB_PORT=5432  # Порт базы данных
      - DB_NAME=DomushnikDb  # Имя базы данных
      - DB_USER=postgres  # Пользователь базы данных
      - DB_PASSWORD=postgres  # Пароль базы данных
      - CELERY_BROKER_URL=redis://redis:6379/0  # URL брокера сообщений (Redis) для Celery

  # Сервис pgAdmin (графический интерфейс для управления PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4  # Используется официальный образ pgAdmin 4
    container_name: pgadmin  # Имя контейнера для pgAdmin
    depends_on:  # Зависимость: pgAdmin запустится только после запуска базы данных
      - db  # Зависит от базы данных
    environment:  # Переменные окружения для настройки pgAdmin
      PGADMIN_DEFAULT_EMAIL: admin@admin.com  # Email для входа в интерфейс pgAdmin
      PGADMIN_DEFAULT_PASSWORD: admin  # Пароль для входа в интерфейс pgAdmin
    ports:  # Проброс порта для доступа к pgAdmin
      - "5050:80"  # Локальный порт 5050 пробрасывается на порт 80 контейнера

volumes:  # Определение volume для хранения данных
  postgres_data:  # Volume для хранения данных PostgreSQL
